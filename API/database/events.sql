-- 
create table events (
    id  integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name varchar(255) NOT NULL,
    details text,
    
    country varchar(255),
    city varchar(255),
    place varchar(255),

    price numeric NOT NULL DEFAULT 0,
    image varchar(255),
        
    //rating numeric NOT NULL DEFAULT 0,
    users_id integer REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
    tag_id integer REFERENCES tags(id) ON UPDATE CASCADE ON DELETE CASCADE,
    ispassed boolean NOT NULL DEFAULT false
); 
-- c
create table tags ( 
    id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    name varchar(255) NOT NULL,    
    description text,
    icon varchar(255)
);

create table event_tag (
    event_id integer REFERENCES events(id) ON UPDATE CASCADE ON DELETE CASCADE,
    tag_id integer REFERENCES tags(id) ON UPDATE CASCADE,
    CONSTRAINT event_tags_pky PRIMARY KEY (event_id, tag_id) 
);

create table users (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  first_name varchar(64) NOT NULL,
  last_name varchar(64) NOT NULL,
  user_name varchar(64) NOT NULL UNIQUE,
  email varchar(255) NOT NULL UNIQUE,
  phone varchar(64) NOT NULL UNIQUE,
  password varchar(255) NOT NULL,
  image varchar(255) NOT NULL

);

create table roles (
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  name varchar(255) NOT NULL UNIQUE
);


create table user_roles (
  user_id integer REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
  role_id integer REFERENCES roles(id) ON UPDATE CASCADE,
  CONSTRAINT user_role_pkey PRIMARY KEY (user_id, role_id)
);

create table notifications (
  isseen boolean,
  user_id integer REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
  event_id integer REFERENCES events(id) ON UPDATE CASCADE,
  CONSTRAINT user_events_pkey PRIMARY KEY (user_id, event_id)
);

create table user_tag (
  user_id integer REFERENCES users(id) ON UPDATE CASCADE ON DELETE CASCADE,
  tag_id integer REFERENCES tags(id) ON UPDATE CASCADE,
  CONSTRAINT user_tags_pky PRIMARY KEY (user_id, tag_id)
);

-- review contains comment and rating togrther
create table review (
id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
rating integer NOT NULL DEFAULT 0,
event_id integer REFERENCES events(id) ON UPDATE CASCADE ON DELETE CASCADE,
user_id integer REFERENCES users(id) ON UPDATE CASCADE,
message text NOT NULL,
  posted_at timestamp NOT NULL
  
);
create table comment(
  id integer PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  event_id integer REFERENCES events(id) ON UPDATE CASCADE ON DELETE CASCADE,
  user_id integer REFERENCES users(id) ON UPDATE CASCADE,
  message text NOT NULL,
  posted_at timestamp NOT NULL
)

